import { Router } from 'express';
import {
  getAll,
  getById,
  createUser,
  updateUser,
  deleteUser,
  loginUser,
  updateSubscription,
  editProfile,
  changePassword,
} from '../controllers/usercontroller';
import { authenticateToken } from '../middlewares/authMiddleware';
import {
  cpfValidation,
  passwordValidation,
  emailValidation,
} from '../middlewares/validationMiddleware';
import { checkOwnership } from '../middlewares/ownerValidationMiddleware';

const router = Router();

// Log para debug
console.log('üîß Configurando rotas de usu√°rio...');

// Rotas de usu√°rios
router.get('/', authenticateToken, getAll); // Apenas usu√°rios autenticados podem listar usu√°rios
router.get('/:id', authenticateToken, getById);

// Cadastro de usu√°rio com valida√ß√µes
router.post(
  '/',
  [emailValidation, cpfValidation, passwordValidation],
  createUser
);

// Login de usu√°rio (sem valida√ß√µes para teste)
router.post('/login', loginUser);
console.log('‚úÖ Rota de login registrada: POST /login');

// Atualiza√ß√£o de usu√°rio com valida√ß√µes e verifica√ß√£o de propriedade
router.put(
  '/:id',
  [authenticateToken, checkOwnership, passwordValidation],
  updateUser
);

// Exclus√£o de usu√°rio com verifica√ß√£o de propriedade
router.delete('/:id', [authenticateToken, checkOwnership], deleteUser);

// Rota para atualiza√ß√£o da assinatura (tornar usu√°rio um organizador)
router.post('/:id/subscribe', authenticateToken, updateSubscription);

// Editar perfil (nome e email)
router.put('/:id/profile', [authenticateToken, checkOwnership], editProfile);

// Trocar senha
router.put(
  '/:id/password',
  [authenticateToken, checkOwnership],
  changePassword
);

console.log('‚úÖ Todas as rotas de usu√°rio configuradas');

export default router;
